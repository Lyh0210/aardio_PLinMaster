import win
import raw

class TLINRcvMsg{
    
    BYTE Type;                           // Frame type (see LIN Received Message Types)
    BYTE FrameId;                               // Frame ID (6 bit) + Parity (2 bit)
    BYTE Length;                                // Frame Length (1..8)
    BYTE Direction;                    // Frame Direction (see LIN Message Direction Types)
    BYTE ChecksumType;              // Frame Checksum type (see LIN Message Checksum Types)
    BYTE Data[8];                               // Data bytes (0..7)
    BYTE Checksum;                              // Frame Checksum
    INT  ErrorFlags;                   // Frame error flags (see Error flags for LIN Rcv Msgs)
    LONG64 TimeStamp;                 // Timestamp in microseconds
    WORD hHw;
}

namespace PLin{
    class AVAILABLE_HW{
    	ctor(num){
    	
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    }
    
    class PLINMSG{
    	ctor(  ){
    		//this.FrameId = PLin.CalculatePID(id)
    		//this.Dir = dir
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    	byte FrameId;
    	byte Len;
    	byte Dir;
    	byte ChecksumType;
    	byte Data[8];
    	byte Checksum;
    }
    
    

    
    CalculatePID = function(ID){
		P0 = (ID & 0x01) ^ ((ID & 0x02) >> 1) ^ ((ID & 0x04) >> 2) ^ ((ID & 0x10) >> 4);
		P1 = (((ID & 0x02) >> 1) ^ ((ID & 0x08) >> 3) ^ ((ID & 0x10) >> 4) ^ ((ID & 0x20) >> 5));
		P1 = P1 ^ 0x01;
		ID = ID | (P0 << 6) | (P1 << 7);

		return ID;
    }
    
    
    
    class PLINHW{
       
    	ctor( /*输入构造函数所需要的参数*/ ){
    		
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    	DllHandle = null;
    	HWconnected = null;
    	Client = null;
    	//AvailableHW = null;
    	//AvailableHW[1] = {int hLINHW;int devnum;int channel;string name}
    	FlashHw = function (){
        	if(DllHandle = null){
            	//DLL为空，返回
        		return 1; 
        	}
        	//读取硬件数量
        	var HWCount = ..raw.buffer(1)
    		var ret = DllHandle.LIN_GetAvailableHardware(0,0,HWCount)
    		if(HWCount[1] == 0){
    			//数量为0，返回
    			AvailableHW = {}//有效硬件清空
    			return 2; 
    		}
    		//读取硬件数据
    		var PLinHwbuf={WORD buf[2]}
    		ret = DllHandle.LIN_GetAvailableHardware(PLinHwbuf,HWCount[1]*2,HWCount)
    		
			AvailableHW = {}//有效硬件
			for(i=1;HWCount[1];1){
				AvailableHW[i] = {int hLINHW;int devnum;int channel;string name}
				var HWtemp = PLinHwbuf.buf[i]
				var HWType = ..raw.buffer(4)//{[1]=0}
				var DevNum = ..raw.buffer(4)//{[1]=0}
				var Channel = ..raw.buffer(4)//{[1]=0}
				DllHandle.LIN_GetHardwareParam(HWtemp,13,HWType,4);
				DllHandle.LIN_GetHardwareParam(HWtemp,2,DevNum,4);
				DllHandle.LIN_GetHardwareParam(HWtemp,3,Channel,4);
				AvailableHW[i].hLINHW = HWtemp
				AvailableHW[i].devnum = DevNum[1]
				AvailableHW[i].channel = Channel[1]
				
				select(HWType[1]) {
					case 1 {
						AvailableHW[i].name = "PCAN Pro"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					case 2 {
						AvailableHW[i].name = "PCAN Pro FD"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					case 3 {
						AvailableHW[i].name = "PLIN"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					else {
						AvailableHW[i].name = "Unknown"
					}
				}
				
				//..win.msgbox(AvailableHW[i].name,"设备",0)
			}
			
    	}
    	GetAvailableHW = function(){
    		return AvailableHW
    	}
    	
    	LoadDll = function (){
    		DllHandle = ..raw.loadDll("PLinApi.dll")
    		if(DllHandle == null)return 1;
    		
    		return 0; 
    	}
    	
    	Connect = function(index,burdrate){
    		import console;
    		import math;
    		if(#AvailableHW == 0 || index > #AvailableHW)
    		{
    			return 1;
    		}
    		var m_hClient = ..raw.buffer(1)
    		//console.dumpJson(index)
    		DllHandle.LIN_RegisterClient("PLIN",null,m_hClient);
    		Client = m_hClient[1]
    		HWtemp = AvailableHW[index].hLINHW
    		//return  HWtemp; 
    		LIN_ConnectClient := DllHandle.api("LIN_ConnectClient","INT(BYTE,WORD)")
    		ret = LIN_ConnectClient(Client, HWtemp);
    		if(ret != 0)
    		{
    			//return 2; 
    		}
    		HWconnected = HWtemp
    		DllHandle.LIN_InitializeHardware(Client, HWconnected, 2, burdrate);
    		var filter = 0xFFFFFFFFFFFFFFFF;
    		//DllHandle.LIN_SetClientFilter(Client,HWconnected,filter)
    		
    		var size = math.size64(0xFFFFFFFF,0xFFFFFFFF);
    		
    		LIN_SetClientFilter := DllHandle.api("LIN_SetClientFilter","INT(BYTE,WORD,LONG64)")
    		LIN_SetClientFilter(Client,HWconnected,size)
    		pfilter = ..raw.buffer(20)
    		//pfilter = 0
    		LIN_GetClientFilter  := DllHandle.api("LIN_GetClientFilter","INT(BYTE,WORD,PTR)")
    		ret = LIN_GetClientFilter(Client,HWconnected,pfilter)
    		//console.dumpJson(pfilter)
    		return 0; 
    	}
    	
    	Disconnect = function(){
    		if(HWconnected != null && Client != null)
    		{
    			DllHandle.LIN_DisconnectClient(Client, HWconnected);
    			DllHandle.LIN_RemoveClient(Client);
    			HWconnected = null
    			Client = null
    		}
    	}
    	
    	isConnected = function(){
    		if(HWconnected != null)
    		{
    			return true; 
    		}
    		else 
    		{
    			return false; 
    		}
    		
    	}
    	
    	TransmitID = function(id){
    		if(HWconnected == null)
    		{
    			return;
    		}
    		var msgtemp = ..raw.buffer(13)
    		msgtemp[1] = id
    		DllHandle.LIN_GetPID(msgtemp)
    		msgtemp[2] = 8
    		msgtemp[3] = 3
    		msgtemp[4] = 2
    		DllHandle.LIN_Write(Client,HWconnected,msgtemp)
    	}
    	
    	ReadMsg = function(){
    		import console;
    		if(HWconnected == null)
    		{
    			return;
    		}
    		LIN_Read := DllHandle.api("LIN_Read","INT(BYTE,struct& rcvmsg)")

    		var msgread = ..TLINRcvMsg();
    		var ret = LIN_Read(Client,msgread)
    		/*
    		if(ret == 0){
    			console.dumpJson(msgread)
    		}
    		*/
    		return ret,msgread; 
    	}
    	
    	GetConnectedName = function(){
    		return AvailableHW[HWconnected].name; 
    	}
    	
    	
    	
    	
    
    }
    
	
}
